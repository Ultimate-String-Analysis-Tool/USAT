// An example configuration file for the Caesar cipher

/*
Every algorithm has a human-readable name.
USAT displays this name when a string matches this algorithm.
Keep this in lower case unless a proper noun is used.
This field is REQUIRED
*/
name = "Caesar cipher";


/*
Every algorithm is implemented by an executable, which is itself contained in a folder
when the project is built. The name of that folder is here.
This field is REQUIRED and CASE-SENSITIVE
*/
folderName = "CaesarCipher";

/*
A short description of the algorithm goes here. 
Neglecting to add a description of the algorithm will not break USAT, 
but well-documented algorithms are greatly beneficial and are thus required on 
EVERY algorithm.
*/
description = "In cryptography, a Caesar cipher, also known as Caesar's cipher, "
"the shift cipher, Caesar's code or Caesar shift, is one of the simplest and most "
"widely known encryption techniques. It is a type of substitution cipher in which "
"each letter in the plaintext is replaced by a letter some fixed number of positions "
"down the alphabet. For example, with a left shift of 3, D would be replaced by A, E "
"would become B, and so on. The method is named after Julius Caesar, who used it "
"in his private correspondence. \n\n"
"The encryption step performed by a Caesar cipher is often incorporated as part of "
"more complex schemes, such as the VigenÃ¨re cipher, and still has modern application "
"in the ROT13 system. As with all single-alphabet substitution ciphers, the Caesar "
"cipher is easily broken and in modern practice offers essentially no communications "
"security. ";

/*
A link to more information about this algorithm goes here. 
Neglecting to add a description of the algorithm will not break USAT, 
but well-documented algorithms are greatly beneficial and are thus required on 
EVERY algorithm.
*/
reference = "https://en.wikipedia.org/wiki/Caesar_cipher";

/*
A "string" field is required regular expression used by USAT to search for algorithms
that match the text input provided by the user. 
*/
//Alphanumeric strings with numbers and whitespace characters are expected for the 
//Caesar cipher.
string = "^(\d|\w|\s|\.|\?|!|,)*$";
	
	
/*
All algorithms that can be encrypted include an "encryption" field containing
the name of the executable that can encrypt and the additional parameters for encryption.
Other requirements for encryption algorithms (like a key for this caesar cipher) are 
optional, and USAT can search for these (both the name of the requirement and the 
requirement itself.
*/
encryption = 
{
	//The name of the executable WITHOUT extensions.
	//Extensions are determined by the operating system.
	//This is REQUIRED by USAT.
	executable = "CaesarCipher";
	
	//The requirements of the encryption algorithm WITHOUT extensions.
	//This is REQUIRED by USAT for all encryption algorithms.
	parameters = 
		{
		
		/*
		Every parameter for the executable must be outlined here.
		USAT uses this part of the configuration file to know how
		to pass parameters to the executable.

		Under the hood, when USAT runs an executable and is given a parameter
		(like right-shift in this case), it will follow thename of the parameter
		with its value and place both at the end of the command. This is how USAT
		will run CaesarCipher with a right-shift value:

		CaesarCipher "hello" --right-shift 1
		Result: ifmmn
		*/
		//Only a numerical parameter (the shift amount) is necessary for encryption
		//with the Caesar cipher.
		right-shift = 
			{
			
			//A human-readable description about the parameter.
			//This is good to have.
			description = "the number of letters in the alphabet to right-shift by. "
			"For example: A -> C has a right-shift value of 2, while C -> A has a "
			"right-shift of -2";
			
			//A regular expression for the structure of the parameter. This is 
			//required for all parameters.
			requirement = "^\-(\d)*$";
			
			//A human-readable version of the regex-encoded requirement above
			//This is good to have.
			readableRequirement = "a number, either positive or negative";
		};
	};
};

/*
All algorithms that can be decrypted include a "decryption" field containing
the name of the executable that can decrypt and the additional parameters for decryption.
Other requirements for decryption algorithms (like a key for this caesar cipher) are 
optional, and USAT can search for these (both the name of the requirement and the 
requirement itself.
*/

//Because the Caesar cipher is a symmetric encryption, this is mostly the same
//as the encryption field.
decryption = 
{
	//The name of the executable WITHOUT extensions.
	//Extensions are determined by the operating system.
	//This is REQUIRED by USAT.
	executable = "CaesarCipher";
	
	//The requirements of the decryption algorithm WITHOUT extensions.
	//This is REQUIRED by USAT for all encryption algorithms.
	parameters = 
		{
		
		/*
		Every parameter for the executable must be outlined here.
		USAT uses this part of the configuration file to know how
		to pass parameters to the executable.

		Under the hood, when USAT runs an executable and is given a parameter
		(like right-shift in this case), it will follow thename of the parameter
		with its value and place both at the end of the command. This is how USAT
		will run CaesarCipher with a right-shift value:

		CaesarCipher "hello" --right-shift 1
		Result: ifmmn
		*/
		//Only a numerical parameter (the shift amount) is necessary for encryption
		//with the Caesar cipher.
		right-shift = 
			{
			
			//A human-readable description about the parameter.
			//This is good to have.
			description = "the number of letters in the alphabet to right-shift by. "
			"For example: A -> C has a right-shift value of 2, while C -> A has a "
			"right-shift of -2";
			
			//A regular expression for the structure of the parameter. This is 
			//required for all parameters.
			requirement = "^\-(\d)*$";
			
			//A human-readable version of the regex-encoded requirement above
			//This is good to have.
			readableRequirement = "a number, either positive or negative";
		};
	};
};